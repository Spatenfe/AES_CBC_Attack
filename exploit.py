import requests

def bitFlip( pos, bit, data):
    list1 = list(data)
    list1[pos] = list1[pos]^bit
    return bytes(list1)

with requests.Session() as session:
    BLOCKSIZE = 16
    session.get('https://t12.itsec.sec.in.tum.de')
    cookie = session.cookies["session"] # Den Cookie mit dem Namen COOKIE lesen
    print(cookie)
    cookie = bytes.fromhex(cookie)

    cookie = bitFlip(7, 21, cookie)
    cookie = bitFlip(8, 1, cookie)
    cookie = bitFlip(9, 30, cookie)
    cookie = bitFlip(10, 29, cookie)
    cookie = bitFlip(11, 11, cookie)
    cookie = bitFlip(12, 80, cookie)
    cookie = bitFlip(13, 2, cookie)

    print(cookie.hex())
    # Do something with the cookie
    session.cookies["session"] = cookie.hex() # Den Cookie mit dem Namen COOKIE gegen cookie austauschen
    res = session.get('https://t12.itsec.sec.in.tum.de')
    print(res.text)

'''
from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
from Crypto.Util.Padding import pad, unpad


class AESCipher:
    def __init__(self, key):
        self.key = key

    def encrypt(self, data):
        iv = get_random_bytes(AES.block_size)
        self.cipher = AES.new(self.key, AES.MODE_CBC, iv)
        return iv + self.cipher.encrypt(pad(data.encode(), 16))

    def decrypt(self, data):
        raw = data
        self.cipher = AES.new(self.key, AES.MODE_CBC, raw[:AES.block_size])
        return unpad(self.cipher.decrypt(raw[AES.block_size:]), AES.block_size)
    



if __name__ == '__main__':

    key = b'Sixteen byte key'
    msg = "{\"u\":\"tester\"}"
    
    print('Original Message:', msg)

    ctx = AESCipher(key).encrypt(msg)
    print('Ciphertext      :', ctx.hex())

    

    print(ctx.hex())

    print('Message...      :', AESCipher(key).decrypt(ctx))'''